// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package datenmodel;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import datenmodel.Enum.Blatttyp;
import datenmodel.Enum.Blattwert;
import datenmodel.Enum.Regel;
import datenmodel.HilfKlassen.BaseEntity;
import lombok.Getter;
import lombok.Setter;
import org.apache.commons.collections4.CollectionUtils;

@Getter
@Setter
public class Spielrunde extends BaseEntity {


    private String gewinnerName;

    private Date start;

    private long dauer;

    // Stapel mit verdeckten karten
    private KartenStapel verdeckteStapel;

    // Stapel mit aufgelegten Karten
    private KartenStapel stapelAufgelegt;

    private List<Ergebnis> ergebnisListe;

    private List<Spielkarte> erlaubteNaechsteKarte;

    private List<Spieler> spielerListe;

    private Blatttyp rundeFarbe;

    private Integer zuZiehnKartenAnzahl;

    private Regel aktivRegel;

    public Spielrunde() {
        this.start = new Date();
    }


    public void registriereSpieler(final Spieler spieler) {
        if(CollectionUtils.isEmpty(this.spielerListe)) {
            spielerListe = new ArrayList<Spieler>();
        }
        this.spielerListe.add(spieler);
    }

    public void baueStapel() {
        for (Blatttyp blatttyp : Blatttyp.values()) {
            for (Blattwert blattwert : Blattwert.values()) {
                this.verdeckteStapel.addeSpielkarte(new Spielkarte(blatttyp, blattwert));
            }
        }
    }

//    public void bestimmeErlaubteNaechsteKarten(final Spielkarte gespielteKarte) {
//
//        // Erst mal Sonderregel prüfen
//        if (gespielteKarte.getRegel() != null) {
//            switch (gespielteKarte.getRegel()) {
//                case ZWEI_ZIEHEN:
//                    for (Blatttyp blatttyp : Blatttyp.values()) {
//                        erlaubteNaechsteKarte.add(new Spielkarte(blatttyp, Regel.ZWEI_ZIEHEN.getBlattwert()));
//
//                        // Aber auch der Aussetzer darf gespielt werden
//                        erlaubteNaechsteKarte.add(new Spielkarte(blatttyp, Regel.STOPPER.getBlattwert()));
//                    }
//                    break;
//                case WUENSCHER:
//
//                    // TODO farbe wurde ausgesucht
//                    break;
//                case RICHTUNGSWECHSEL:
//                    // TODO Richtung wird geändert
//                    this.bestimmeStandardErlaubtenKarten(gespielteKarte);
//                    break;
//                case STOPPER:
//                case ALLESLEGER:
//                    this.bestimmeStandardErlaubtenKarten(gespielteKarte);
//                    break;
//                case AUSSETZEN:
//                    this.erlaubteNaechsteKarte = null;
//                    break;
//            }
//        }
//
//    }

//    public void bestimmeStandardErlaubtenKarten(final Spielkarte gespielteKarte) {
//        // Standard erlaubte Karten
//        // Selber Blatttyp
//        for (Blattwert blattwert : Blattwert.values()) {
//            erlaubteNaechsteKarte.add(new Spielkarte(gespielteKarte.getBlatttyp(), blattwert));
//        }
//
//        // Selber Blattwert
//        for (Blatttyp blatttyp : Blatttyp.values()) {
//            erlaubteNaechsteKarte.add(new Spielkarte(blatttyp, gespielteKarte.getBlattwert()));
//        }
//    }


}
