// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package datenmodel;

import java.util.Date;
import java.util.List;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class Spielrunde extends BaseEntity{


    private String gewinnerName;

    private Date start;

    private long dauer;

    // Stapel mit verdeckten karten
    private KartenStapel stapel;

    // Stapel mit aufgelegten Karten
    private KartenStapel stapelAufgelegt;

    private Spieler spielerDaran;

    private List<Ergebnis> ergebnisListe;

    private boolean richtungUhrzeit = true;

    private List<Spielkarte> erlaubteNaechsteKarte;

    public Spielrunde() {
        this.start = new Date();
    }


    public void bestimmeErlaubteNaechsteKarten(final Spielkarte gespielteKarte) {

        // Erst mal Sonderregel prüfen
        if (gespielteKarte.getRegel() != null) {
            switch (gespielteKarte.getRegel()) {
                case ZWEI_ZIEHEN:
                    for (Blatttyp blatttyp : Blatttyp.values()) {
                        erlaubteNaechsteKarte.add(new Spielkarte(blatttyp, Regel.ZWEI_ZIEHEN.getBlattwert()));

                        // Aber auch der Aussetzer darf gespielt werden
                        erlaubteNaechsteKarte.add(new Spielkarte(blatttyp, Regel.AUSSETZEN.getBlattwert()));
                    }
                    break;
                case WUENSCHER:

                    // TODO farbe wurde ausgesucht
                    break;
                case RICHTUNGSWECHSEL:
                    // TODO Richtung wird geändert
                    this.bestimmeStandardErlaubtenKarten(gespielteKarte);
                    break;
                case STOPPER:
                    this.bestimmeStandardErlaubtenKarten(gespielteKarte);
                    break;
                case ALLESLEGER:
                    this.bestimmeStandardErlaubtenKarten(gespielteKarte);
                    break;
                case AUSSETZEN:
                    this.erlaubteNaechsteKarte = null;
                    break;
            }
        }

    }

    public void bestimmeStandardErlaubtenKarten(final Spielkarte gespielteKarte) {
        // Standard erlaubte Karten
        // Selber Blatttyp
        for (Blattwert blattwert : Blattwert.values()) {
            erlaubteNaechsteKarte.add(new Spielkarte(gespielteKarte.getBlatttyp(), blattwert));
        }

        // Selber Blattwert
        for (Blatttyp blatttyp : Blatttyp.values()) {
            erlaubteNaechsteKarte.add(new Spielkarte(blatttyp, gespielteKarte.getBlattwert()));
        }
    }


};
